// <auto-generated />
using ConnektaViz.API.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ConnektaViz.API.Migrations
{
    [DbContext(typeof(ConnektaVizContext))]
    [Migration("20241223095841_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ConnektaViz.API.Entities.ColumnSP", b =>
                {
                    b.Property<string>("FK")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsNumber")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PK")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Column");
                });

            modelBuilder.Entity("ConnektaViz.API.Entities.Dashboard", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Dashboard");
                });

            modelBuilder.Entity("ConnektaViz.API.Entities.DashboardGraph", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("DashboardId")
                        .HasColumnType("bigint");

                    b.Property<long>("GraphId")
                        .HasColumnType("bigint");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<double>("Width")
                        .HasColumnType("float");

                    b.Property<double>("X")
                        .HasColumnType("float");

                    b.Property<double>("Y")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.HasIndex("GraphId");

                    b.ToTable("DashboardGraph");
                });

            modelBuilder.Entity("ConnektaViz.API.Entities.Graph", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("DataSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MatricFunction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("Graph");
                });

            modelBuilder.Entity("ConnektaViz.API.Entities.GraphColumn", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("GraphId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsNumber")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GraphId");

                    b.ToTable("GraphColumn");
                });

            modelBuilder.Entity("ConnektaViz.API.Entities.GraphStyling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BackgroundColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("BarPercentage")
                        .HasColumnType("real");

                    b.Property<int>("BarThickness")
                        .HasColumnType("int");

                    b.Property<bool>("BeginAtZeroX")
                        .HasColumnType("bit");

                    b.Property<bool>("BeginAtZeroY")
                        .HasColumnType("bit");

                    b.Property<string>("BorderAlign")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BorderCapStyle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BorderColor")
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("BorderDash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BorderDashOffset")
                        .HasColumnType("int");

                    b.Property<string>("BorderJoinStyle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BorderRadius")
                        .HasColumnType("int");

                    b.Property<string>("BorderSkipped")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BorderWidth")
                        .HasColumnType("int");

                    b.Property<float>("CategoryPercentage")
                        .HasColumnType("real");

                    b.Property<bool>("Fill")
                        .HasColumnType("bit");

                    b.Property<long>("GraphId")
                        .HasColumnType("bigint");

                    b.Property<string>("HoverBackgroundColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HoverBorderCapStyle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HoverBorderColor")
                        .HasColumnType("nvarchar(max)");

                    b.PrimitiveCollection<string>("HoverBorderDash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HoverBorderDashOffset")
                        .HasColumnType("int");

                    b.Property<string>("HoverBorderJoinStyle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HoverBorderRadius")
                        .HasColumnType("int");

                    b.Property<int>("HoverBorderWidth")
                        .HasColumnType("int");

                    b.Property<int>("HoverOffset")
                        .HasColumnType("int");

                    b.Property<bool>("IsLegendShow")
                        .HasColumnType("bit");

                    b.Property<bool>("IsXAxisShow")
                        .HasColumnType("bit");

                    b.Property<bool>("IsYAxisShow")
                        .HasColumnType("bit");

                    b.Property<string>("LegendFontFamily")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LegendFontSize")
                        .HasColumnType("int");

                    b.Property<string>("LegendFontStyle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LegendFontWeight")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxBarThickness")
                        .HasColumnType("int");

                    b.Property<int>("MaxX")
                        .HasColumnType("int");

                    b.Property<int>("MaxY")
                        .HasColumnType("int");

                    b.Property<int>("MinBarLength")
                        .HasColumnType("int");

                    b.Property<int>("MinX")
                        .HasColumnType("int");

                    b.Property<int>("MinY")
                        .HasColumnType("int");

                    b.Property<int>("Offset")
                        .HasColumnType("int");

                    b.Property<string>("PointBackgroundColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PointBorderColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PointBorderWidth")
                        .HasColumnType("int");

                    b.Property<int>("PointHitRadius")
                        .HasColumnType("int");

                    b.Property<string>("PointHoverBackgroundColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PointHoverBorderColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PointHoverBorderWidth")
                        .HasColumnType("int");

                    b.Property<int>("PointHoverRadius")
                        .HasColumnType("int");

                    b.Property<int>("PointRadius")
                        .HasColumnType("int");

                    b.Property<int>("PointRotation")
                        .HasColumnType("int");

                    b.Property<string>("PointStyle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rotation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Spacing")
                        .HasColumnType("int");

                    b.Property<int>("StepSizeX")
                        .HasColumnType("int");

                    b.Property<int>("StepSizeY")
                        .HasColumnType("int");

                    b.Property<int>("Tension")
                        .HasColumnType("int");

                    b.Property<string>("TooltipFontFamily")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TooltipFontSize")
                        .HasColumnType("int");

                    b.Property<string>("TooltipFontStyle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TooltipFontWeight")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GraphId");

                    b.ToTable("GraphStyling");
                });

            modelBuilder.Entity("ConnektaViz.API.Entities.GraphTableFilter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("DisplayOperator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Field")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("GraphId")
                        .HasColumnType("bigint");

                    b.Property<string>("Keyword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Operator")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GraphId");

                    b.ToTable("GraphTableFilter");
                });

            modelBuilder.Entity("ConnektaViz.API.Entities.GraphType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GraphType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Icon = "assets/images/icons/bar.svg",
                            IsActive = true,
                            Label = "Bar Graph",
                            Type = "bar"
                        },
                        new
                        {
                            Id = 2,
                            Icon = "assets/images/icons/line.svg",
                            IsActive = true,
                            Label = "Line Graph",
                            Type = "line"
                        },
                        new
                        {
                            Id = 3,
                            Icon = "assets/images/icons/pie.svg",
                            IsActive = true,
                            Label = "Pie Graph",
                            Type = "pie"
                        },
                        new
                        {
                            Id = 4,
                            Icon = "assets/images/icons/doughnut.svg",
                            IsActive = true,
                            Label = "Doughnut Graph",
                            Type = "doughnut"
                        },
                        new
                        {
                            Id = 5,
                            Icon = "assets/images/icons/scatter.svg",
                            IsActive = true,
                            Label = "Scatter Plot",
                            Type = "scatter"
                        },
                        new
                        {
                            Id = 6,
                            Icon = "assets/images/icons/scatter.svg",
                            IsActive = true,
                            Label = "Score Card",
                            Type = "score"
                        });
                });

            modelBuilder.Entity("ConnektaViz.API.Entities.KeyValue", b =>
                {
                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("KeyValue");
                });

            modelBuilder.Entity("ConnektaViz.API.Entities.MergeQuery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MergeQuery");
                });

            modelBuilder.Entity("ConnektaViz.API.Entities.MergeQueryDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ForeignColumn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JoinType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LeftTable")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LeftTableAlias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MergeQueryId")
                        .HasColumnType("int");

                    b.Property<string>("Operator")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryColumn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RightTable")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RightTableAlias")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MergeQueryId");

                    b.ToTable("MergeQueryDetail");
                });

            modelBuilder.Entity("ConnektaViz.API.Entities.SelectedTableColumn", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("GraphId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GraphId");

                    b.ToTable("SelectedTableColumn");
                });

            modelBuilder.Entity("ConnektaViz.API.Entities.TableVW", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("No")
                        .HasColumnType("bigint");

                    b.ToTable((string)null);

                    b.ToView("vu_Tables", (string)null);
                });

            modelBuilder.Entity("ConnektaViz.API.Entities.DashboardGraph", b =>
                {
                    b.HasOne("ConnektaViz.API.Entities.Dashboard", "Dashboard")
                        .WithMany("DashboardGraphs")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ConnektaViz.API.Entities.Graph", "Graph")
                        .WithMany("DashboardGraphs")
                        .HasForeignKey("GraphId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Dashboard");

                    b.Navigation("Graph");
                });

            modelBuilder.Entity("ConnektaViz.API.Entities.Graph", b =>
                {
                    b.HasOne("ConnektaViz.API.Entities.GraphType", "GraphType")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GraphType");
                });

            modelBuilder.Entity("ConnektaViz.API.Entities.GraphColumn", b =>
                {
                    b.HasOne("ConnektaViz.API.Entities.Graph", "Graph")
                        .WithMany("GraphColumns")
                        .HasForeignKey("GraphId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Graph");
                });

            modelBuilder.Entity("ConnektaViz.API.Entities.GraphStyling", b =>
                {
                    b.HasOne("ConnektaViz.API.Entities.Graph", "Graph")
                        .WithMany("GraphStyling")
                        .HasForeignKey("GraphId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Graph");
                });

            modelBuilder.Entity("ConnektaViz.API.Entities.GraphTableFilter", b =>
                {
                    b.HasOne("ConnektaViz.API.Entities.Graph", "Graph")
                        .WithMany("GraphTableFilters")
                        .HasForeignKey("GraphId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Graph");
                });

            modelBuilder.Entity("ConnektaViz.API.Entities.MergeQueryDetail", b =>
                {
                    b.HasOne("ConnektaViz.API.Entities.MergeQuery", "MergeQuery")
                        .WithMany("MergeQueryDetails")
                        .HasForeignKey("MergeQueryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MergeQuery");
                });

            modelBuilder.Entity("ConnektaViz.API.Entities.SelectedTableColumn", b =>
                {
                    b.HasOne("ConnektaViz.API.Entities.Graph", "Graph")
                        .WithMany("SelectedTableColumns")
                        .HasForeignKey("GraphId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Graph");
                });

            modelBuilder.Entity("ConnektaViz.API.Entities.Dashboard", b =>
                {
                    b.Navigation("DashboardGraphs");
                });

            modelBuilder.Entity("ConnektaViz.API.Entities.Graph", b =>
                {
                    b.Navigation("DashboardGraphs");

                    b.Navigation("GraphColumns");

                    b.Navigation("GraphStyling");

                    b.Navigation("GraphTableFilters");

                    b.Navigation("SelectedTableColumns");
                });

            modelBuilder.Entity("ConnektaViz.API.Entities.MergeQuery", b =>
                {
                    b.Navigation("MergeQueryDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
